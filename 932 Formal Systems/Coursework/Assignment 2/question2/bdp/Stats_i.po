THEORY ProofList IS
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.39,(_f(39) & _f(79) & _f(73) & _f(78) & _f(75) & _f(77) & _f(66) => _f(131));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.38,(_f(39) & _f(79) & _f(73) & _f(78) & _f(75) & _f(76) & _f(63) => _f(94));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.37,(_f(39) & _f(79) & _f(73) & _f(78) & _f(75) & _f(76) & _f(59) => _f(93));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.36,(_f(39) & _f(79) & _f(73) & _f(78) & _f(75) & _f(57) => _f(92));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.35,(_f(39) & _f(79) & _f(73) & _f(78) & _f(50) => _f(91));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.34,(_f(39) & _f(79) & _f(73) & _f(78) & _f(91) & _f(66) => _f(107));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.33,(_f(39) & _f(79) & _f(73) & _f(78) & _f(91) & _f(66) => _f(117));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.32,(_f(39) & _f(79) & _f(73) & _f(78) & _f(128) & _f(66) => _f(107));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.31,(_f(39) & _f(79) & _f(73) & _f(78) & _f(128) & _f(66) => _f(133));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.30,(_f(39) & _f(79) & _f(73) & _f(78) & _f(110) & _f(66) => _f(107));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.29,(_f(39) & _f(79) & _f(73) & _f(78) & _f(110) & _f(66) => _f(135));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.28,(_f(39) & _f(79) & _f(73) & _f(78) & _f(66) => _f(116));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.27,(_f(39) & _f(79) & _f(73) & _f(78) & _f(66) => _f(131));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.26,(_f(39) & _f(79) & _f(73) & _f(74) & _f(63) => _f(89));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.25,(_f(39) & _f(79) & _f(73) & _f(74) & _f(59) => _f(88));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.24,(_f(39) & _f(79) & _f(73) & _f(57) => _f(87));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.23,(_f(39) & _f(79) & _f(50) => _f(86));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.22,(_f(39) & _f(79) & _f(86) & _f(105) => _f(107));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.21,(_f(39) & _f(79) & _f(86) & _f(105) => _f(117));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.20,(_f(39) & _f(79) & _f(126) & _f(105) => _f(107));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.19,(_f(39) & _f(79) & _f(126) & _f(105) => _f(133));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.18,(_f(39) & _f(79) & _f(110) & _f(105) => _f(107));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.17,(_f(39) & _f(79) & _f(110) & _f(105) => _f(134));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.16,(_f(39) & _f(79) & _f(105) => _f(116));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.15,(_f(39) & _f(79) & _f(105) => _f(131));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.14,(_f(39) & _f(72) & _f(69) & _f(70) & _f(63) => _f(83));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.13,(_f(39) & _f(72) & _f(69) & _f(70) & _f(59) => _f(82));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.12,(_f(39) & _f(72) & _f(69) & _f(57) => _f(81));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.11,(_f(39) & _f(72) & _f(50) => _f(80));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.10,(_f(39) & _f(72) & _f(80) & _f(105) => _f(107));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.9,(_f(39) & _f(72) & _f(80) & _f(105) => _f(117));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.8,(_f(39) & _f(72) & _f(124) & _f(105) => _f(107));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.7,(_f(39) & _f(72) & _f(124) & _f(105) => _f(133));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.6,(_f(39) & _f(72) & _f(110) & _f(105) => _f(107));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.5,(_f(39) & _f(72) & _f(110) & _f(105) => _f(132));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.4,(_f(39) & _f(72) & _f(105) => _f(116));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.3,(_f(39) & _f(72) & _f(105) => _f(131));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.2,(_f(39) & _f(105) => _f(130));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymedian.1,(_f(39) & _f(105) => _f(129));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymean.14,(_f(39) & _f(111) & _f(112) & _f(113) & _f(115) & _f(66) => _f(109));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymean.13,(_f(39) & _f(111) & _f(112) & _f(113) & _f(114) & _f(63) => _f(122));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymean.12,(_f(39) & _f(111) & _f(112) & _f(113) & _f(114) & _f(59) & _f(55) => _f(121));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymean.11,(_f(39) & _f(111) & _f(112) & _f(113) & _f(114) & _f(59) & _f(53) => _f(120));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymean.10,(_f(39) & _f(111) & _f(112) & _f(113) & _f(114) & _f(59) & _f(51) => _f(119));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymean.9,(_f(39) & _f(111) & _f(112) & _f(113) & _f(57) => _f(118));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymean.8,(_f(39) & _f(50) & _f(55) => _f(56));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymean.7,(_f(39) & _f(50) & _f(53) => _f(54));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymean.6,(_f(39) & _f(50) & _f(51) => _f(52));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymean.5,(_f(39) & _f(52) & _f(54) & _f(56) & _f(105) => _f(107));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymean.4,(_f(39) & _f(52) & _f(54) & _f(56) & _f(105) => _f(117));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymean.3,(_f(39) & _f(52) & _f(54) & _f(110) & _f(105) => _f(107));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymean.2,(_f(39) & _f(52) & _f(54) & _f(110) & _f(105) => _f(31));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(41) & WellDefinedness_querymean.1,(_f(39) & _f(52) & _f(54) & _f(105) => _f(116));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(108) & WellDefinedness_querypc.3,(_f(39) & _f(105) => _f(109));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(108) & WellDefinedness_querypc.2,(_f(39) & _f(105) => _f(107));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(108) & WellDefinedness_querypc.1,(_f(39) & _f(105) => _f(31));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(7) & WellDefinedness_queryreg.2,(_f(105) => _f(107));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(7) & WellDefinedness_queryreg.1,(_f(105) => _f(31));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(20) & WellDefinedness_tested.2,(_f(22) & _f(105) => _f(107));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(20) & WellDefinedness_tested.1,(_f(22) & _f(105) => _f(31));
_f(1) & _f(5) & _f(6) & _f(18) & WellDefinednessInvariant.3,(_f(102) & _f(103) & _f(104) & _f(101) & _f(100) & _f(99) & _f(7) & _f(105) => _f(107));
_f(1) & _f(5) & _f(6) & _f(18) & WellDefinednessInvariant.2,(_f(102) & _f(103) & _f(104) & _f(101) & _f(100) & _f(99) & _f(7) & _f(105) => _f(31));
_f(1) & _f(5) & _f(6) & _f(18) & WellDefinednessInvariant.1,(_f(102) & _f(103) & _f(104) & _f(101) & _f(100) & _f(99) & _f(105) => _f(106));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymedian.18,(_f(41) & _f(40) & _f(8) => _f(97));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymedian.17,(_f(41) & _f(39) & _f(79) & _f(73) & _f(78) & _f(75) & _f(77) & _f(66) => _f(96));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymedian.16,(_f(41) & _f(39) & _f(79) & _f(73) & _f(78) & _f(75) & _f(76) & _f(30) => _f(95));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymedian.15,(_f(41) & _f(39) & _f(79) & _f(73) & _f(78) & _f(75) & _f(76) & _f(63) => _f(94));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymedian.14,(_f(41) & _f(39) & _f(79) & _f(73) & _f(78) & _f(75) & _f(76) & _f(59) => _f(93));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymedian.13,(_f(41) & _f(39) & _f(79) & _f(73) & _f(78) & _f(75) & _f(57) => _f(92));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymedian.12,(_f(41) & _f(39) & _f(79) & _f(73) & _f(78) & _f(50) => _f(91));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymedian.11,(_f(41) & _f(39) & _f(79) & _f(73) & _f(74) & _f(30) => _f(90));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymedian.10,(_f(41) & _f(39) & _f(79) & _f(73) & _f(74) & _f(63) => _f(89));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymedian.9,(_f(41) & _f(39) & _f(79) & _f(73) & _f(74) & _f(59) => _f(88));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymedian.8,(_f(41) & _f(39) & _f(79) & _f(73) & _f(57) => _f(87));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymedian.7,(_f(41) & _f(39) & _f(79) & _f(50) => _f(86));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymedian.6,(_f(41) & _f(39) & _f(72) & _f(69) & _f(71) & _f(66) => _f(85));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymedian.5,(_f(41) & _f(39) & _f(72) & _f(69) & _f(70) & _f(30) => _f(84));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymedian.4,(_f(41) & _f(39) & _f(72) & _f(69) & _f(70) & _f(63) => _f(83));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymedian.3,(_f(41) & _f(39) & _f(72) & _f(69) & _f(70) & _f(59) => _f(82));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymedian.2,(_f(41) & _f(39) & _f(72) & _f(69) & _f(57) => _f(81));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymedian.1,(_f(41) & _f(39) & _f(72) & _f(50) => _f(80));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymean.11,(_f(41) & _f(40) & _f(8) => _f(68));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymean.10,(_f(41) & _f(39) & _f(45) & _f(46) & _f(47) & _f(49) & _f(66) => _f(67));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymean.9,(_f(41) & _f(39) & _f(45) & _f(46) & _f(47) & _f(48) & _f(30) => _f(65));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymean.8,(_f(41) & _f(39) & _f(45) & _f(46) & _f(47) & _f(48) & _f(63) => _f(64));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymean.7,(_f(41) & _f(39) & _f(45) & _f(46) & _f(47) & _f(48) & _f(59) & _f(55) => _f(62));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymean.6,(_f(41) & _f(39) & _f(45) & _f(46) & _f(47) & _f(48) & _f(59) & _f(53) => _f(61));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymean.5,(_f(41) & _f(39) & _f(45) & _f(46) & _f(47) & _f(48) & _f(59) & _f(51) => _f(60));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymean.4,(_f(41) & _f(39) & _f(45) & _f(46) & _f(47) & _f(57) => _f(58));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymean.3,(_f(41) & _f(39) & _f(50) & _f(55) => _f(56));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymean.2,(_f(41) & _f(39) & _f(50) & _f(53) => _f(54));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querymean.1,(_f(41) & _f(39) & _f(50) & _f(51) => _f(52));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querypc.3,(_f(7) & _f(41) & _f(40) & _f(8) => _f(43));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querypc.2,(_f(7) & _f(41) & _f(39) & _f(30) => _f(31));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querypc.1,(_f(7) & _f(41) & _f(39) & _f(8) => _f(42));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & queryreg.2,(_f(7) & _f(30) => _f(31));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & queryreg.1,(_f(7) & _f(8) => _f(37));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(34) & querytot.1,(_f(8) => _f(35));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(2) & tested.7,(_f(7) & _f(24) & _f(23) & _f(21) & _f(8) => _f(32));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(2) & tested.6,(_f(7) & _f(24) & _f(22) & _f(30) => _f(31));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(2) & tested.5,(_f(7) & _f(24) & _f(22) & _f(8) & _f(16) => _f(29));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(2) & tested.4,(_f(7) & _f(24) & _f(22) & _f(21) & _f(8) => _f(28));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(2) & tested.3,(_f(7) & _f(24) & _f(22) & _f(8) & _f(13) => _f(27));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(2) & tested.2,(_f(7) & _f(24) & _f(22) & _f(8) & _f(11) => _f(26));
_f(1) & _f(5) & _f(6) & _f(18) & _f(19) & _f(2) & tested.1,(_f(7) & _f(24) & _f(22) & _f(8) & _f(9) => _f(25));
_f(1) & _f(5) & _f(6) & Initialisation.5,(_f(8) & _f(16) => _f(17));
_f(1) & _f(5) & _f(6) & Initialisation.4,(_f(7) & _f(8) => _f(15));
_f(1) & _f(5) & _f(6) & Initialisation.3,(_f(8) & _f(13) => _f(14));
_f(1) & _f(5) & _f(6) & Initialisation.2,(_f(8) & _f(11) => _f(12));
_f(1) & _f(5) & _f(6) & Initialisation.1,(_f(8) & _f(9) => _f(10));
_f(1) & _f(2) & ValuesLemmas.1,(_f(3) => _f(4))
END
&
THEORY Formulas IS
((NAT) = (((0) .. (2147483647)))) & ((INT) = (((-2147483647) .. (2147483647))));
btrue;
"Valuation is correct";
((100) : ((NAT-{0})));
((maxlen) : ((NAT-{0})));
((maxlen) = (100));
((nn) : (((0) .. (10))));
"Refinement is correct";
"Check invariant ((marks$1) : (((((0) .. (10))) --> (NAT))))";
(((((0) .. (10)) * ({0}))) : (((((0) .. (10))) --> (NAT))));
"Check invariant ((count$1) : (NAT))";
((0) : (NAT));
"Check invariant (count$1 <= maxlen)";
(0 <= maxlen);
((((((0) .. (10)) * ({0})) )(nn)) = (card((({}) |> (({nn}))))));
"Check invariant ((SIGMA(nn).(((nn) : (((0) .. (10)))) | (marks$1 )(nn))) = (count$1))";
((SIGMA(nn).(((nn) : (((0) .. (10)))) | ((((0) .. (10)) * ({0})) )(nn))) = (0));
record : NATURAL-{0} +-> ((0) .. (10)) & ((record) : (seq(((0) .. (10))))) & (size(record) <= maxlen);
marks$1 : ((0) .. (10)) +-> NAT & dom(marks$1) = ((0) .. (10)) & ((marks$1) : (((((0) .. (10))) --> (NAT)))) & ((count$1) : (NAT)) & (count$1 <= maxlen) & !(nn).(((((nn) : (((0) .. (10))))) => ((((marks$1 )(nn)) = (card(((record) |> (({nn}))))))))) & ((SIGMA(nn).(((nn) : (((0) .. (10)))) | (marks$1 )(nn))) = (count$1));
((nn) : (((0) .. (10)))) & (size(record) +1 <= maxlen);
((nn$1) : (((0) .. (10))));
(count$1 +1 <= maxlen);
not((count$1 +1 <= maxlen));
(size(record) +1 <= maxlen);
((((marks$1) <+ (({((nn) |-> (((marks$1 )(nn) + 1)))})))) : (((((0) .. (10))) --> (NAT))));
(((count$1 + 1)) : (NAT));
((count$1 + 1) <= maxlen);
(((((marks$1) <+ (({((nn) |-> (((marks$1 )(nn) + 1)))}))) )(nn$1)) = (card(((((record) <- (nn))) |> (({nn$1}))))));
((SIGMA(nn$1).(((nn$1) : (((0) .. (10)))) | (((marks$1) <+ (({((nn) |-> (((marks$1 )(nn) + 1)))}))) )(nn$1))) = ((count$1 + 1)));
"Instruction Well Definess";
((nn) : (dom(marks$1)));
(((marks$1 )(nn$1)) = (card(((((record) <- (nn))) |> (({nn$1}))))));
((oo) = (oo));
((oo$1) = (oo));
((count$1) = (size(record)));
((nn) : (((0) .. (10)))) & ((oo) = (oo));
(((marks$1 )(nn)) = (card(((record) |> (({nn}))))));
((nn) : (((0) .. (10)))) & not(size(record) = 0) & ((oo) = (oo));
not(count$1 = 0);
not(not(count$1 = 0));
not(size(record) = 0);
(((((marks$1 )(nn) * 100) / count$1)) = ((card(((record) |> (({nn})))) / size(record))));
((oo$1) = ((card(((record) |> (({nn})))) / size(record))));
not(size(record) = 0) & ((oo) = (oo));
(0 <= ii$2);
(ii$2 <= 11);
((tt$1) = (SIGMA(nn).(((nn) : (((0) .. ((ii$2 - 1))))) | (nn * (marks$1 )(nn)))));
not(ii$2 = 11);
not(not(ii$2 = 11));
"Loop initialisation";
"Check invariant (0 <= ii)";
(0 <= 0);
"Check invariant (ii <= 11)";
(0 <= 11);
"Check invariant ((tt) = (SIGMA(nn).(((nn) : (((0) .. ((ii - 1))))) | (nn * (marks$1 )(nn)))))";
((0) = (SIGMA(nn).(((nn) : (((0) .. ((0 - 1))))) | (nn * (marks$1 )(nn)))));
"Loop variant is positive";
(0 <= (11 - ii$2));
"Loop invariant is preserved";
(0 <= (ii$2 + 1));
((ii$2 + 1) <= 11);
(((tt$1 + ((marks$1 )(ii$2) * ii$2))) = (SIGMA(nn).(((nn) : (((0) .. (((ii$2 + 1) - 1))))) | (nn * (marks$1 )(nn)))));
"Variant is decreasing";
((11 - (ii$2 + 1)) +1 <= (11 - ii$2));
((ii$2) : (dom(marks$1)));
"End of loop";
(((tt$1 / count$1)) = ((SIGMA(ii).(((ii) : (dom(record))) | (record )(ii)) / size(record))));
((oo$1) = ((SIGMA(ii).(((ii) : (dom(record))) | (record )(ii)) / size(record))));
((((tt$1) = (SIGMA(nn).(((nn) : (((0) .. ((mm$1 - 1))))) | (marks$1 )(((count$1 + 1) / 2))))) & (tt$1 +1 <= ((count$1 + 1) / 2))) or (((tt$1 - (marks$1 )((mm$1 - 1))) +1 <= ((count$1 + 1) / 2))));
(tt$1 +1 <= ((count$1 + 1) / 2));
not((tt$1 +1 <= ((count$1 + 1) / 2)));
((((count$1) mod (2))) = (1));
((((t1$1) = (SIGMA(nn).(((nn) : (((0) .. ((m1$1 - 1))))) | (marks$1 )((count$1 / 2))))) & (t1$1 +1 <= (count$1 / 2))) or (((t1$1 - (marks$1 )((m1$1 - 1))) +1 <= (count$1 / 2))));
(t1$1 +1 <= (count$1 / 2));
((((t2$1) = (SIGMA(nn).(((nn) : (((0) .. ((m2$1 - 1))))) | (marks$1 )(((count$1 / 2) + 1))))) & (t2$1 +1 <= ((count$1 / 2) + 1))) or (((t2$1 - (marks$1 )((m2$1 - 1))) +1 <= ((count$1 / 2) + 1))));
(t2$1 +1 <= ((count$1 / 2) + 1));
not((t2$1 +1 <= ((count$1 / 2) + 1)));
not((t1$1 +1 <= (count$1 / 2)));
not(((((count$1) mod (2))) = (1)));
((((0) = (SIGMA(nn).(((nn) : (((0) .. ((0 - 1))))) | (marks$1 )(((count$1 + 1) / 2))))) & (0 +1 <= ((count$1 + 1) / 2))) or (((0 - (marks$1 )((0 - 1))) +1 <= ((count$1 + 1) / 2))));
(0 <= (10 - mm$1));
(((((tt$1 + (marks$1 )(mm$1))) = (SIGMA(nn).(((nn) : (((0) .. (((mm$1 + 1) - 1))))) | (marks$1 )(((count$1 + 1) / 2))))) & ((tt$1 + (marks$1 )(mm$1)) +1 <= ((count$1 + 1) / 2))) or ((((tt$1 + (marks$1 )(mm$1)) - (marks$1 )(((mm$1 + 1) - 1))) +1 <= ((count$1 + 1) / 2))));
((10 - (mm$1 + 1)) +1 <= (10 - mm$1));
((mm$1) : (dom(marks$1)));
#(rr).(((rr) : (seq(((0) .. (10))))) & ((size(rr)) = (size(record))) & !(nn).(((((nn) : (((0) .. (10))))) => (((card(((rr) |> (({nn}))))) = (card(((record) |> (({nn}))))))))) & !(ii,jj).(((((ii) : (((1) .. (card(rr))))) & ((jj) : (((1) .. (card(rr))))) & (ii <= jj)) => (((rr )(ii) <= (rr )(jj))))) & ((((((size(record)) mod (2))) = (1))) => (((marks$1) : (((((0) .. (10))) --> (NAT)))) & ((count$1) : (NAT)) & (count$1 <= maxlen) & !(nn).(((((nn) : (((0) .. (10))))) => ((((marks$1 )(nn)) = (card(((record) |> (({nn}))))))))) & ((SIGMA(nn).(((nn) : (((0) .. (10)))) | (marks$1 )(nn))) = (count$1)) & (((mm$1 - 1)) = ((rr )(((size(record) + 1) / 2)))))) & ((not(((((size(record)) mod (2))) = (1)))) => (((marks$1) : (((((0) .. (10))) --> (NAT)))) & ((count$1) : (NAT)) & (count$1 <= maxlen) & !(nn).(((((nn) : (((0) .. (10))))) => ((((marks$1 )(nn)) = (card(((record) |> (({nn}))))))))) & ((SIGMA(nn).(((nn) : (((0) .. (10)))) | (marks$1 )(nn))) = (count$1)) & (((mm$1 - 1)) = ((((rr )((size(record) / 2)) + (rr )(((size(record) / 2) + 1))) / 2))))));
((((0) = (SIGMA(nn).(((nn) : (((0) .. ((0 - 1))))) | (marks$1 )((count$1 / 2))))) & (0 +1 <= (count$1 / 2))) or (((0 - (marks$1 )((0 - 1))) +1 <= (count$1 / 2))));
(0 <= (10 - m1$1));
(((((t1$1 + (marks$1 )(m1$1))) = (SIGMA(nn).(((nn) : (((0) .. (((m1$1 + 1) - 1))))) | (marks$1 )((count$1 / 2))))) & ((t1$1 + (marks$1 )(m1$1)) +1 <= (count$1 / 2))) or ((((t1$1 + (marks$1 )(m1$1)) - (marks$1 )(((m1$1 + 1) - 1))) +1 <= (count$1 / 2))));
((10 - (m1$1 + 1)) +1 <= (10 - m1$1));
((m1$1) : (dom(marks$1)));
((((0) = (SIGMA(nn).(((nn) : (((0) .. ((0 - 1))))) | (marks$1 )(((count$1 / 2) + 1))))) & (0 +1 <= ((count$1 / 2) + 1))) or (((0 - (marks$1 )((0 - 1))) +1 <= ((count$1 / 2) + 1))));
(0 <= (10 - m2$1));
(((((t2$1 + (marks$1 )(m2$1))) = (SIGMA(nn).(((nn) : (((0) .. (((m2$1 + 1) - 1))))) | (marks$1 )(((count$1 / 2) + 1))))) & ((t2$1 + (marks$1 )(m2$1)) +1 <= ((count$1 / 2) + 1))) or ((((t2$1 + (marks$1 )(m2$1)) - (marks$1 )(((m2$1 + 1) - 1))) +1 <= ((count$1 / 2) + 1))));
((10 - (m2$1 + 1)) +1 <= (10 - m2$1));
((m2$1) : (dom(marks$1)));
#(rr).(((rr) : (seq(((0) .. (10))))) & ((size(rr)) = (size(record))) & !(nn).(((((nn) : (((0) .. (10))))) => (((card(((rr) |> (({nn}))))) = (card(((record) |> (({nn}))))))))) & !(ii,jj).(((((ii) : (((1) .. (card(rr))))) & ((jj) : (((1) .. (card(rr))))) & (ii <= jj)) => (((rr )(ii) <= (rr )(jj))))) & ((((((size(record)) mod (2))) = (1))) => (((marks$1) : (((((0) .. (10))) --> (NAT)))) & ((count$1) : (NAT)) & (count$1 <= maxlen) & !(nn).(((((nn) : (((0) .. (10))))) => ((((marks$1 )(nn)) = (card(((record) |> (({nn}))))))))) & ((SIGMA(nn).(((nn) : (((0) .. (10)))) | (marks$1 )(nn))) = (count$1)) & ((((((m1$1 - 1) + m2$1) - 1) / 2)) = ((rr )(((size(record) + 1) / 2)))))) & ((not(((((size(record)) mod (2))) = (1)))) => (((marks$1) : (((((0) .. (10))) --> (NAT)))) & ((count$1) : (NAT)) & (count$1 <= maxlen) & !(nn).(((((nn) : (((0) .. (10))))) => ((((marks$1 )(nn)) = (card(((record) |> (({nn}))))))))) & ((SIGMA(nn).(((nn) : (((0) .. (10)))) | (marks$1 )(nn))) = (count$1)) & ((((((m1$1 - 1) + m2$1) - 1) / 2)) = ((((rr )((size(record) / 2)) + (rr )(((size(record) / 2) + 1))) / 2))))));
#(rr).(((rr) : (seq(((0) .. (10))))) & ((size(rr)) = (size(record))) & !(nn).(((((nn) : (((0) .. (10))))) => (((card(((rr) |> (({nn}))))) = (card(((record) |> (({nn}))))))))) & !(ii,jj).(((((ii) : (((1) .. (card(rr))))) & ((jj) : (((1) .. (card(rr))))) & (ii <= jj)) => (((rr )(ii) <= (rr )(jj))))) & ((((((size(record)) mod (2))) = (1))) => (((marks$1) : (((((0) .. (10))) --> (NAT)))) & ((count$1) : (NAT)) & (count$1 <= maxlen) & !(nn).(((((nn) : (((0) .. (10))))) => ((((marks$1 )(nn)) = (card(((record) |> (({nn}))))))))) & ((SIGMA(nn).(((nn) : (((0) .. (10)))) | (marks$1 )(nn))) = (count$1)) & ((oo$1) = ((rr )(((size(record) + 1) / 2)))))) & ((not(((((size(record)) mod (2))) = (1)))) => (((marks$1) : (((((0) .. (10))) --> (NAT)))) & ((count$1) : (NAT)) & (count$1 <= maxlen) & !(nn).(((((nn) : (((0) .. (10))))) => ((((marks$1 )(nn)) = (card(((record) |> (({nn}))))))))) & ((SIGMA(nn).(((nn) : (((0) .. (10)))) | (marks$1 )(nn))) = (count$1)) & ((oo$1) = ((((rr )((size(record) / 2)) + (rr )(((size(record) / 2) + 1))) / 2))))));
((((nn) : (((0) .. (10))))) => (((nn) : (dom(marks$1))) & ((marks$1) : (((dom(marks$1)) +-> (ran(marks$1))))) & ((((record) |> (({nn})))) : (FIN(((record) |> (({nn}))))))));
!(nn).(((((nn) : (((0) .. (10))))) => ((((marks$1 )(nn)) = (card(((record) |> (({nn})))))))));
(count$1 <= maxlen);
((count$1) : (NAT));
marks$1 : ((0) .. (10)) +-> NAT;
dom(marks$1) = ((0) .. (10));
((marks$1) : (((((0) .. (10))) --> (NAT))));
"Well definedness";
((SET(nn).(((nn) : (((0) .. (10)))))) : (FIN(SET(nn).(((nn) : (((0) .. (10))))))));
((marks$1) : (((dom(marks$1)) +-> (ran(marks$1)))));
((nn) : (((0) .. (10)))) & not(size(record) = 0);
not(((count$1) = (0)));
((nn) : (((0) .. ((0 - 1)))));
(0 <= ii$1);
(ii$1 <= 11);
((tt$1) = (SIGMA(nn).(((nn) : (((0) .. ((ii$1 - 1))))) | (nn * (marks$1 )(nn)))));
not(ii$1 = 11);
not(not(ii$1 = 11));
((SET(nn).(((nn) : (((0) .. ((0 - 1))))))) : (FIN(SET(nn).(((nn) : (((0) .. ((0 - 1)))))))));
((0) : (dom(marks$1)));
(0 <= (11 - ii$1));
(0 <= (ii$1 + 1));
((ii$1 + 1) <= 11);
(((tt$1 + ((marks$1 )(ii$1) * ii$1))) = (SIGMA(nn).(((nn) : (((0) .. (((ii$1 + 1) - 1))))) | (nn * (marks$1 )(nn)))));
((11 - (ii$1 + 1)) +1 <= (11 - ii$1));
((0) = (SIGMA(nn).(((nn) : (((0) .. ((0 - 1))))) | (marks$1 )(((count$1 + 1) / 2)))));
not(((0) = (SIGMA(nn).(((nn) : (((0) .. ((0 - 1))))) | (marks$1 )(((count$1 + 1) / 2))))) & (0 +1 <= ((count$1 + 1) / 2)));
((0) = (SIGMA(nn).(((nn) : (((0) .. ((0 - 1))))) | (marks$1 )((count$1 / 2)))));
not(((0) = (SIGMA(nn).(((nn) : (((0) .. ((0 - 1))))) | (marks$1 )((count$1 / 2))))) & (0 +1 <= (count$1 / 2)));
((0) = (SIGMA(nn).(((nn) : (((0) .. ((0 - 1))))) | (marks$1 )(((count$1 / 2) + 1)))));
not(((0) = (SIGMA(nn).(((nn) : (((0) .. ((0 - 1))))) | (marks$1 )(((count$1 / 2) + 1))))) & (0 +1 <= ((count$1 / 2) + 1)));
(0 <= count$1);
(1 <= 2);
not(((2) = (0)));
((((count$1 + 1) / 2)) : (dom(marks$1)));
(((0 - 1)) : (dom(marks$1)));
(((count$1 / 2)) : (dom(marks$1)));
((((count$1 / 2) + 1)) : (dom(marks$1)))
END
&
THEORY EnumerateX
END
